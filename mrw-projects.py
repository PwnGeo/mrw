import datetime
import random
import sqlite3
import pandas as pd
import numpy as np
import streamlit as st
import altair as alt

# Configure the SQLite database
def init_sqlite_db():
    conn = sqlite3.connect('projects.db')  # ƒë·ªïi file database th√†nh projects.db
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS projects (
            id TEXT PRIMARY KEY,
            description TEXT,
            status TEXT,
            priority TEXT,
            date_submitted TEXT
        )
    ''')
    conn.commit()
    conn.close()

def add_project_to_db(project_data):
    conn = sqlite3.connect('projects.db')
    c = conn.cursor()
    c.execute('''
        INSERT INTO projects (id, description, status, priority, date_submitted)
        VALUES (?, ?, ?, ?, ?)
    ''', project_data)
    conn.commit()
    conn.close()

def delete_project_from_db(project_id):
    conn = sqlite3.connect('projects.db')
    c = conn.cursor()
    c.execute('DELETE FROM projects WHERE id = ?', (project_id,))
    conn.commit()
    conn.close()

def load_projects_from_db():
    conn = sqlite3.connect('projects.db')
    df = pd.read_sql_query("SELECT * FROM projects", conn)
    conn.close()
    return df

# Initialize SQLite database
init_sqlite_db()

# Show app title and description
st.set_page_config(page_title="H·ªá Th·ªëng Qu·∫£n L√Ω D·ª± √Ån", page_icon="üìä")
st.title("üìä Qu·∫£n L√Ω D·ª± √Ån")
st.write("""
    Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng qu·∫£n l√Ω d·ª± √°n c·ªßa c√¥ng ty Miraway! H·ªá th·ªëng n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ gi√∫p b·∫°n theo d√µi v√† qu·∫£n l√Ω th√¥ng tin d·ª± √°n m·ªôt c√°ch hi·ªáu qu·∫£ nh·∫•t.
""")

# Load existing projects from the database or create new projects
df = load_projects_from_db()

# Show a section to add a new project
st.header("ƒêi·ªÅn th√¥ng tin c·∫ßn thi·∫øt nh∆∞ m√¥ t·∫£ d·ª± √°n v√† m·ª©c ƒë·ªô ∆∞u ti√™n.")

with st.form("add_project_form"):
    description = st.text_area("M√¥ t·∫£ d·ª± √°n")
    priority = st.selectbox("M·ª©c ƒë·ªô ∆∞u ti√™n", ["Cao", "Trung b√¨nh", "Th·∫•p"])
    submitted = st.form_submit_button("T·∫°o m·ªõi")

if submitted:
    recent_project_number = len(df) + 1  # T·ª± ƒë·ªông tƒÉng s·ªë d·ª± √°n d·ª±a tr√™n c√°c d·ª± √°n hi·ªán c√≥.
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    new_project_id = f"PROJECT-{recent_project_number}"
    
    # Add the new project to the database
    add_project_to_db((new_project_id, description, "M·ªü", priority, today))
    
    # Refresh the DataFrame
    df = load_projects_from_db()

    # Display success message
    st.write("D·ª± √°n ƒë√£ ƒë∆∞·ª£c t·∫°o m·ªõi! D∆∞·ªõi ƒë√¢y l√† th√¥ng tin d·ª± √°n:")
    st.dataframe(pd.DataFrame([[new_project_id, description, "M·ªü", priority, today]],
                               columns=["ID", "M√¥ t·∫£", "T√¨nh tr·∫°ng", "M·ª©c ƒë·ªô ∆∞u ti√™n", "Ng√†y g·ª≠i"]),
                 use_container_width=True, hide_index=True)

# Show section to view and edit existing projects in a table
st.header("C√°c d·ª± √°n hi·ªán c√≥")
st.write(f"S·ªë l∆∞·ª£ng d·ª± √°n tham gia: `{len(df)}`")

st.info(
    "B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a c√°c d·ª± √°n b·∫±ng c√°ch nh·∫•p ƒë√∫p v√†o m·ªôt √¥. L∆∞u √Ω r·∫±ng c√°c bi·ªÉu ƒë·ªì b√™n d∆∞·ªõi "
    "s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t! B·∫°n c≈©ng c√≥ th·ªÉ s·∫Øp x·∫øp b·∫£ng b·∫±ng c√°ch nh·∫•p v√†o ti√™u ƒë·ªÅ c·ªôt.",
    icon="‚úçÔ∏è",
)

# Show the projects dataframe with `st.data_editor`
edited_df = st.data_editor(
    df,
    use_container_width=True,
    hide_index=True,
    column_config={
        "status": st.column_config.SelectboxColumn(
            "T√¨nh tr·∫°ng",
            help="T√¨nh tr·∫°ng d·ª± √°n",
            options=["M·ªü", "ƒêang x·ª≠ l√Ω", "ƒê√£ ƒë√≥ng"],
            required=True,
        ),
        "priority": st.column_config.SelectboxColumn(
            "M·ª©c ƒë·ªô ∆∞u ti√™n",
            help="M·ª©c ƒë·ªô ∆∞u ti√™n",
            options=["Cao", "Trung b√¨nh", "Th·∫•p"],
            required=True,
        ),
    },
    disabled=["id", "date_submitted"],
)

# Show some metrics and charts about the project

st.header("Th·ªëng k√™")

# col1, col2, col3 = st.columns(3)
# num_open_projects = len(df[df.status == "M·ªü"])
# col1.metric(label="S·ªë l∆∞·ª£ng d·ª± √°n ƒëang m·ªü", value=num_open_projects, delta=0)
# col2.metric(label="Th·ªùi gian ph·∫£n h·ªìi ƒë·∫ßu ti√™n (gi·ªù)", value=5.2, delta=-1.5)
# col3.metric(label="Th·ªùi gian gi·∫£i quy·∫øt trung b√¨nh (gi·ªù)", value=16, delta=2)
# Show some metrics and charts about the project
if len(df) > 0:  # Ch·ªâ hi·ªÉn th·ªã th·ªëng k√™ n·∫øu c√≥ d·ª± √°n
    col1, col2, col3 = st.columns(3)
    num_open_projects = len(df[df.status == "M·ªü"])
    col1.metric(label="S·ªë l∆∞·ª£ng d·ª± √°n ƒëang m·ªü", value=num_open_projects, delta=0)
    col2.metric(label="Th·ªùi gian ph·∫£n h·ªìi ƒë·∫ßu ti√™n (gi·ªù)", value=5.2, delta=-1.5)
    col3.metric(label="Th·ªùi gian gi·∫£i quy·∫øt trung b√¨nh (gi·ªù)", value=16, delta=2)

    # Display Altair charts
    st.write("##### T√¨nh tr·∫°ng d·ª± √°n theo th√°ng")

    # ƒê·ªïi ƒë·ªãnh d·∫°ng c·ªßa c·ªôt `date_submitted` th√†nh ki·ªÉu datetime v√† t·∫°o c·ªôt th√°ng v·ªõi ƒë·ªãnh d·∫°ng dd-mm-yyyy
    df['date_submitted'] = pd.to_datetime(df['date_submitted'])
    df['month'] = df['date_submitted'].dt.strftime('%d-%m-%Y')

    status_plot = (
        alt.Chart(df)
        .mark_bar()
        .encode(
            x=alt.X("month:O", axis=alt.Axis(labelAngle=0)),
            y="count():Q",
            xOffset="status:N",
            color="status:N",
        )
        .configure_legend(
            orient="bottom", titleFontSize=14, labelFontSize=14, titlePadding=5
        )
    )
    st.altair_chart(status_plot, use_container_width=True, theme="streamlit")

    st.write("##### C√°c m·ª©c ƒë·ªô ∆∞u ti√™n hi·ªán t·∫°i")
    priority_plot = (
        alt.Chart(df)
        .mark_arc()
        .encode(theta="count():Q", color="priority:N")
        .properties(height=300)
        .configure_legend(
            orient="bottom", titleFontSize=14, labelFontSize=14, titlePadding=5
        )
    )
    st.altair_chart(priority_plot, use_container_width=True, theme="streamlit")

else:
    st.write("Hi·ªán kh√¥ng c√≥ d·ª± √°n n√†o ƒë·ªÉ hi·ªÉn th·ªã.")  # Th√¥ng b√°o kh√¥ng c√≥ d·ª± √°n

# X√≥a d·ª± √°n theo ID ng∆∞·ªùi d√πng nh·∫≠p
st.header("X√≥a d·ª± √°n")
project_id_to_delete = st.text_input("Nh·∫≠p ID d·ª± √°n mu·ªën x√≥a (v√≠ d·ª•: PROJECT-1)")

if st.button("X√≥a d·ª± √°n"):
    if project_id_to_delete in df['id'].values:
        delete_project_from_db(project_id_to_delete)
        st.success(f"D·ª± √°n {project_id_to_delete} ƒë√£ ƒë∆∞·ª£c x√≥a.")
        # T·∫£i l·∫°i danh s√°ch d·ª± √°n
        df = load_projects_from_db()
    else:
        st.error("ID d·ª± √°n kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i.")

# Save the edited projects back to the SQLite database if there are changes
if st.button("L∆∞u thay ƒë·ªïi"):
    with sqlite3.connect('projects.db') as conn:
        for index, row in edited_df.iterrows():
            conn.execute('''
                UPDATE projects
                SET status = ?, priority = ?
                WHERE id = ?
            ''', (row["status"], row["priority"], row["id"]))
        conn.commit()
    st.success("C√°c thay ƒë·ªïi ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")

# End of the Streamlit app
